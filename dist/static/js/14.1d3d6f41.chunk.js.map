{"version":3,"sources":["pages/post-article/components/TypeRadio/index.tsx","services/requestPath.ts","services/request.ts","pages/edit-article/index.tsx","services/article/service.ts","services/category/service.ts"],"names":["TypeRadio","onChange","props","getTypeValue","ids","className","id","this","type","defaultChecked","name","htmlFor","value","React","Component","REQUEST_PATH","instance","axios","create","baseURL","timeout","withCredentials","interceptors","request","use","config","headers","error","console","warn","Promise","reject","response","data","url","params","get","post","qs","stringify","EditArticle","onHandleTitle","e","articleData","state","title","target","setState","onHandleDes","des","onHandleTag","tags","split","categoryIds","onHandleContent","content","showModel","visible","handleCancel","handleOk","category","_id","confirmLoading","setTimeout","updateArticle","then","res","message","success","history","push","msg","categoryList","typeId","typeName","bind","match","getArticleDetails","getCategoryList","placeholder","to","author","onClick","onOk","onCancel","okText","cancelText","map","item","key","join","getArticleList","getArticleListOfType","getArticleListOfUser","getArticleComments","addArticleComment","praiseArticle","addArticle","deleteArticle","collectArticle","getCollectionList","cancelCollection"],"mappings":"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","file":"static/js/14.1d3d6f41.chunk.js","sourcesContent":["import React from 'react';\nimport './style.less';\n\ninterface TypeRadioPropsType {\n  ids: string;\n  defaultChecked?: boolean;\n  name: string;\n  value: string;\n  getTypeValue: (ids: string) => void;\n}\n\nclass TypeRadio extends React.Component<TypeRadioPropsType> {\n\n  onChange = () => {\n    this.props.getTypeValue(this.props.ids);\n  }\n\n  render() {\n    return (\n      <span className=\"radio\">\n        <input\n          id={this.props.ids}\n          type=\"radio\"\n          defaultChecked={this.props.defaultChecked || false}\n          name={this.props.name}\n          onChange={this.onChange}\n        />\n        <label htmlFor={this.props.ids} className=\"label\">\n          {this.props.value}\n        </label>\n      </span>\n    )\n  }\n}\n\nexport default TypeRadio;","const NODE_EDV = process.env.NODE_ENV;\n\nlet REQUEST_PATH: string = '';\n\nif (NODE_EDV === 'development') {\n  REQUEST_PATH = 'http://127.0.0.1:3000';\n} else {\n  REQUEST_PATH = 'http://127.0.0.1';\n}\n\nexport default REQUEST_PATH;","import axios from 'axios';\nimport qs from 'qs';\nimport REQUEST_PATH from './requestPath';\n\n/**\n * 自定义实例默认值\n */\nconst instance = axios.create({\n  baseURL: REQUEST_PATH,\n  timeout: 5000, // 请求超时时间\n  withCredentials: true,\n});\n\n/**\n * 添加请求拦截器 ，意思就是发起请求接口之前做什么事，一般都会发起加载一个loading\n */\ninstance.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么（... 这里写你的展示loading的逻辑代码 ）\n    // 获取token，配置请求头\n    config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    return config;\n  },\n  error => {\n    // 对请求错误做些什么，处理这个错误\n    // 可以直接处理或者展示出去,toast show()\n    console.warn(error);\n    return Promise.reject(error);\n  }\n);\n/**\n * 添加响应拦截器\n */\ninstance.interceptors.response.use(\n  response => {\n    let res = response.data;\n    return res;\n  },\n  error => {\n    //响应错误\n    // console.log(error)\n    return Promise.reject(error);\n  }\n)\n/**\n * 使用es6中的类，进行简单封装\n */\nexport class request {\n  // 使用async ... await\n  static async get(url: string, params: any) {\n    return await instance.get(url, {\n      params: params\n    });\n  }\n  static async post(url: string, params: any) {\n    return await instance.post(url, qs.stringify(params));\n  }\n  static async filePost(url: string, params: any) {\n    return await instance.post(url, params);\n  }\n};","import React from 'react';\nimport ReactQuill from 'react-quill'; // ES6\nimport TypeRadio from '../post-article/components/TypeRadio';\nimport { Button, Modal, message } from 'antd';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { getArticleDetails, updateArticle } from '../../services/article/service';\nimport { getCategoryList } from '../../services/category/service';\nimport 'react-quill/dist/quill.snow.css';\nimport '../post-article/style.less';\nimport { IState } from './data';\nimport { AddArticleParamsType } from '../../services/article/data';\nimport { CategoryType } from '../data';\n\nclass EditArticle extends React.Component<RouteComponentProps<any>, IState> {\n\n  constructor(props: RouteComponentProps<any>) {\n    super(props);\n    this.state = {\n      categoryIds: '',\n      categoryList: [],\n      articleData: {\n        _id: '',\n        title: '',\n        des: '',\n        content: '',\n        category: {\n          _id: '',\n          typeId: '',\n          typeName: '',\n        },\n        tags: [],\n      },\n\n      visible: false,\n      confirmLoading: false,\n    }\n    this.onHandleTitle = this.onHandleTitle.bind(this)\n    this.onHandleDes = this.onHandleDes.bind(this)\n    this.onHandleContent = this.onHandleContent.bind(this)\n    this.onHandleTag = this.onHandleTag.bind(this)\n  }\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    // 获取文章详情\n    getArticleDetails(params).then((res: any) => {\n      const { data } = res;\n      this.setState({ articleData: data, categoryIds: data.category._id });\n    });\n\n    //获取分类选项\n    getCategoryList().then((res: any) => {\n      this.setState({ categoryList: res.data });\n    })\n  }\n\n  /**\n   * 标题、简述、标签、分类、富文本内容\n   */\n  onHandleTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let { articleData } = this.state;\n    articleData.title = e.target.value;\n    this.setState({ articleData });\n  }\n  onHandleDes = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    let { articleData } = this.state;\n    articleData.des = e.target.value;\n    this.setState({ articleData });\n  }\n  onHandleTag = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let { articleData } = this.state;\n    articleData.tags = e.target.value.split(' ');\n    this.setState({ articleData });\n  }\n  getTypeValue = (ids: string) => {\n    this.setState({ categoryIds: ids });\n  }\n  onHandleContent = (value: string) => {\n    let { articleData } = this.state;\n    articleData.content = value;\n    this.setState({ articleData });\n  }\n\n  /**\n   * 打开Model弹窗\n   */\n  showModel = () => {\n    this.setState({ visible: true });\n  }\n\n  /**\n   * 关闭Model弹窗\n   */\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n\n  /**\n   * 修改文章\n   */\n  handleOk = () => {\n    const { articleData, categoryIds } = this.state;\n\n    const params: AddArticleParamsType = {\n      title: articleData.title,\n      des: articleData.des,\n      content: articleData.content,\n      category: categoryIds,\n      tags: articleData.tags,\n      ids: articleData._id,\n    }\n\n    this.setState({ confirmLoading: true });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      }, () => {\n        updateArticle(params).then((res: any) => {\n          if (res.state === 200) {\n            message.success('修改成功！', 1.5, () => {\n              this.props.history.push(`/article/${res.ids}`);\n            })\n          } else {\n            message.error(res.msg);\n          }\n        })\n      });\n    }, 1500);\n  };\n\n  render() {\n    const { articleData } = this.state;\n    return (\n      <main className=\"main\">\n        <div className=\"title\">\n          <div className=\"input-title\">\n            <input type=\"text\"\n              placeholder=\"输入文章标题...\"\n              value={articleData.title}\n              onChange={this.onHandleTitle}\n            />\n          </div>\n          <div className=\"action-bar\">\n            <Link to={`/user/${articleData.author}`}>返回个人中心</Link>\n            <Button type=\"primary\" onClick={this.showModel}>确认修改</Button>\n            <Modal\n              title=\"修改文章\"\n              visible={this.state.visible}\n              onOk={this.handleOk}\n              onCancel={this.handleCancel}\n              confirmLoading={this.state.confirmLoading}\n              okText=\"确认\"\n              cancelText=\"取消\"\n            >\n              <div className=\"row\">\n                <h3>分类</h3>\n                {this.state.categoryList.map((item: CategoryType) => (\n                  <TypeRadio\n                    key={item.typeId}\n                    ids={item._id}\n                    defaultChecked={item.typeId === articleData.category.typeId ? true : false}\n                    value={item.typeName}\n                    name=\"分类\"\n                    getTypeValue={this.getTypeValue}\n                  />\n                ))}\n              </div>\n              <div className=\"row\">\n                <h3>标签</h3>\n                <input type=\"text\"\n                  placeholder=\"添加一个或多个标签（多个标签之间用空格隔开）\"\n                  value={articleData.tags.join(' ')}\n                  onChange={this.onHandleTag}\n                />\n              </div>\n            </Modal>\n          </div>\n        </div>\n        <div className=\"des\">\n          <textarea\n            placeholder=\"输入文章简述...\"\n            onChange={this.onHandleDes}\n            value={articleData.des}\n          ></textarea>\n        </div>\n        <ReactQuill\n          placeholder=\"输入文章内容...\"\n          value={articleData.content}\n          onChange={this.onHandleContent}\n        />\n      </main>\n    )\n  }\n}\n\nexport default EditArticle;","import { request } from '../request';\nimport {\n  GetArticleListParamsType,\n  GetArticleDataParamsType,\n  AddCommentParamsType,\n  AddArticleParamsType,\n} from './data';\n\n/**\n * 获取文章列表\n * @param params 关键字keyword、分类typeId、页码page、每页条数count\n */\nconst getArticleList = (params: GetArticleListParamsType) => {\n  return request.get('/article/get/list', params);\n}\n\n/**\n * 获取特殊类型的文章列表\n * @param type 榜单类型（目前仅支持 hot、popular）\n */\nconst getArticleListOfType = (type: string) => {\n  return request.get(`/article/get/list/${type}`, {});\n}\n\n/**\n * 获取指定用户（_id）发布过的文章列表\n * @param params 用户_id\n */\nconst getArticleListOfUser = (params: GetArticleDataParamsType) => {\n  return request.get('/article/get/list/user', params);\n}\n\n/**\n * 获取文章详情\n * @param params 文章_id\n */\nconst getArticleDetails = (params: GetArticleDataParamsType) => {\n  return request.get('/article/get/details', params);\n}\n\n/**\n * 获取文章评论\n * @param params 文章_id\n */\nconst getArticleComments = (params: GetArticleDataParamsType) => {\n  return request.get('/article/get/comments', params);\n}\n\n/**\n * 评论文章\n * @param params 文章_id 、 评论内容content\n */\nconst addArticleComment = (params: AddCommentParamsType) => {\n  return request.post('/article/add/comment', params);\n}\n\n/**\n * 点赞文章\n * @param params 文章_id\n */\nconst praiseArticle = (params: GetArticleDataParamsType) => {\n  return request.post('/article/update/likes', params);\n}\n\n/**\n * 发表文章\n * @param params 文章字段\n */\nconst addArticle = (params: AddArticleParamsType) => {\n  return request.post('/article/add', params);\n}\n\n/**\n * 修改文章\n * @param params 文章字段\n */\nconst updateArticle = (params: AddArticleParamsType) => {\n  return request.post('/article/update', params);\n}\n\n/**\n * 删除文章\n * @param params 文章_id\n */\nconst deleteArticle = (params: GetArticleDataParamsType) => {\n  return request.post('/article/delete', params);\n}\n\n/**\n * 收藏文章\n */\nconst collectArticle = (params: GetArticleDataParamsType) => {\n  return request.post('/article/add/collection', params);\n}\n\n/**\n * 获取用户的收藏列表\n */\nconst getCollectionList = (params: GetArticleDataParamsType) => {\n  return request.get('/article/get/collections', params)\n}\n\n/**\n * 取消收藏\n */\nconst cancelCollection = (params: GetArticleDataParamsType) => {\n  return request.post('/article/cancel/collection', params);\n}\n\nexport {\n  getArticleList,\n  getArticleListOfUser,\n  getArticleListOfType,\n  getArticleDetails,\n  getArticleComments,\n  getCollectionList,\n  cancelCollection,\n  addArticle,\n  addArticleComment,\n  praiseArticle,\n  collectArticle,\n  updateArticle,\n  deleteArticle,\n}","import { request } from '../request';\n\n/**\n * 获取分类列表\n */\nconst getCategoryList = () => {\n  return request.get('/category/list', {});\n}\n\nexport {\n  getCategoryList,\n}"],"sourceRoot":""}