{"version":3,"sources":["utils/asyncComponents.js","router.js","serviceWorker.ts","index.tsx"],"names":["asyncComponent","importComponent","props","state","component","this","hasLoadedComponent","default","setState","callback","C","Component","HomePage","ArticleDetails","UserCenter","PostArticle","EditProfile","Exception","Router","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAEe,SAASA,EAAeC,GAkCrC,OAlCsD,YAEpD,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAW,MAHI,EAFiC,+JAU9CC,KAAKC,qBAVyC,2EAabL,KAba,gBAajCG,EAbiC,EAa1CG,QACRF,KAAKG,SAAS,CACZJ,UAAWA,IAfqC,4FAoBlD,OAAgC,OAAzBC,KAAKF,MAAMC,YApBgC,6CAuBlDC,KAAKG,SAAW,SAACL,EAAOM,OAvB0B,+BA6BlD,IAAMC,EAAIL,KAAKF,MAAMC,UACrB,OAAOM,EAAI,kBAACA,EAAML,KAAKH,OAAY,SA9Be,GACzBS,aCI/B,IAAMC,EAAWZ,GAAe,kBAAM,qEAChCa,EAAiBb,GAAe,kBAAM,8DACtCc,EAAad,GAAe,kBAAM,8DAClCe,EAAcf,GAAe,kBAAM,+DACnCgB,EAAchB,GAAe,kBAAM,+DACnCiB,EAAYjB,GAAe,kBAAM,kCAexBkB,EAbA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIhB,UAAWQ,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,gBAAgBhB,UAAWS,IAC7C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAahB,UAAWW,IAC1C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,aAAahB,UAAWU,IAC1C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,wBAAwBhB,UAAWY,IACrD,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,mBAAmBhB,UAAWa,OCVlCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SDoI9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.706f3acf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        component: null\n      };\n    }\n\n    async componentDidMount() {\n      if (this.hasLoadedComponent()) {\n        return;\n      }\n      const { default: component } = await importComponent();\n      this.setState({\n        component: component\n      });\n    }\n\n    hasLoadedComponent() {\n      return this.state.component !== null;\n    }\n    componentWillUnmount() {\n      this.setState = (state, callback) => {\n        return\n      }\n    }\n\n    render() {\n      const C = this.state.component;\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n}","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport asyncComponent from './utils/asyncComponents';\n\n/**\n * 异步加载路由\n */\nconst HomePage = asyncComponent(() => import('./pages/home-page'));\nconst ArticleDetails = asyncComponent(() => import('./pages/article-details'));\nconst UserCenter = asyncComponent(() => import('./pages/user-center'));\nconst PostArticle = asyncComponent(() => import('./pages/post-article'));\nconst EditProfile = asyncComponent(() => import('./pages/edit-profile'));\nconst Exception = asyncComponent(() => import('./pages/exception'));\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route exact path=\"/article/:ids\" component={ArticleDetails} />\n      <Route exact path=\"/post/:ids\" component={PostArticle} />\n      <Route exact path=\"/user/:ids\" component={UserCenter} />\n      <Route exact path=\"/user/setting/profile\" component={EditProfile} />\n      <Route exact path=\"/exception/:code\" component={Exception} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './styles/normalize.less';\nimport Router from './router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}