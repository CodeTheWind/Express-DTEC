{"version":3,"sources":["pages/post-article/components/TypeRadio/index.tsx","services/requestPath.ts","services/request.ts","pages/edit-article/index.tsx","pages/edit-article/service.ts","services/article/service.ts","services/category/service.ts"],"names":["TypeRadio","onChange","props","getTypeValue","id","value","className","this","type","defaultChecked","name","htmlFor","React","Component","REQUEST_PATH","instance","axios","create","baseURL","timeout","withCredentials","interceptors","request","use","config","headers","error","console","warn","Promise","reject","response","data","url","params","get","post","qs","stringify","EditArticle","onHandleTitle","e","setState","title","target","onHandleDes","des","onHandleTag","tags","split","typeId","typeName","onHandleContent","content","showModel","visible","handleCancel","handleOk","state","userIds","ids","category","confirmLoading","setTimeout","updateArticle","then","res","message","msg","success","history","push","_id","categoryList","bind","match","getArticleDetails","getCategoryList","join","placeholder","to","onClick","onOk","onCancel","okText","cancelText","map","item","key","getArticleList","getArticleListOfType","getArticleListOfUser","getArticleComments","addArticleComment","praiseArticle","addArticle","deleteArticle"],"mappings":"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","file":"static/js/13.e2832e5c.chunk.js","sourcesContent":["import React from 'react';\nimport './style.less';\n\ninterface TypeRadioPropsType {\n  id: string;\n  defaultChecked?: boolean;\n  name: string;\n  value: string;\n  getTypeValue: Function;\n}\n\nclass TypeRadio extends React.Component<TypeRadioPropsType> {\n\n  onChange = () => {\n    this.props.getTypeValue(this.props.id, this.props.value);\n  }\n\n  render() {\n    return (\n      <span className=\"radio\">\n        <input\n          id={this.props.id}\n          type=\"radio\"\n          defaultChecked={this.props.defaultChecked || false}\n          name={this.props.name}\n          onChange={this.onChange}\n        />\n        <label htmlFor={this.props.id} className=\"label\">\n          {this.props.value}\n        </label>\n      </span>\n    )\n  }\n}\n\nexport default TypeRadio;","const NODE_EDV = process.env.NODE_ENV;\n\nlet REQUEST_PATH: string = '';\n\nif (NODE_EDV === 'development') {\n  REQUEST_PATH = 'http://127.0.0.1:3000';\n} else {\n  REQUEST_PATH = 'http://127.0.0.1';\n}\n\nexport default REQUEST_PATH;","import axios from 'axios';\nimport qs from 'qs';\nimport REQUEST_PATH from './requestPath';\n\n/**\n * 自定义实例默认值\n */\nconst instance = axios.create({\n  baseURL: REQUEST_PATH,\n  timeout: 5000, // 请求超时时间\n  withCredentials: true,\n});\n\n/**\n * 添加请求拦截器 ，意思就是发起请求接口之前做什么事，一般都会发起加载一个loading\n */\ninstance.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么（... 这里写你的展示loading的逻辑代码 ）\n    // 获取token，配置请求头\n    config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    return config;\n  },\n  error => {\n    // 对请求错误做些什么，处理这个错误\n    // 可以直接处理或者展示出去,toast show()\n    console.warn(error);\n    return Promise.reject(error);\n  }\n);\n/**\n * 添加响应拦截器\n */\ninstance.interceptors.response.use(\n  response => {\n    let res = response.data;\n    return res;\n  },\n  error => {\n    //响应错误\n    // console.log(error)\n    return Promise.reject(error);\n  }\n)\n/**\n * 使用es6中的类，进行简单封装\n */\nexport class request {\n  // 使用async ... await\n  static async get(url: string, params: any) {\n    return await instance.get(url, {\n      params: params\n    });\n  }\n  static async post(url: string, params: any) {\n    return await instance.post(url, qs.stringify(params));\n  }\n  static async filePost(url: string, params: any) {\n    return await instance.post(url, params);\n  }\n};","import React from 'react';\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css';\nimport '../post-article/style.less';\nimport { Button, Modal, message } from 'antd';\nimport TypeRadio from '../post-article/components/TypeRadio';\nimport { updateArticle } from './service';\nimport { Link } from 'react-router-dom';\n\nimport { getArticleDetails } from '../../services/article/service';\nimport { getCategoryList } from '../../services/category/service';\n\n\n\n\nclass EditArticle extends React.Component<any, any> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      userIds: '',\n      _id: '',\n      title: '',\n      des: '',\n      content: '',\n      category: '',\n      tags: [],\n      categoryList: [],\n      visible: false,\n      confirmLoading: false,\n    }\n    this.onHandleTitle = this.onHandleTitle.bind(this)\n    this.onHandleDes = this.onHandleDes.bind(this)\n    this.onHandleContent = this.onHandleContent.bind(this)\n    this.onHandleTag = this.onHandleTag.bind(this)\n  }\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    // 获取文章详情\n    getArticleDetails(params).then((res: any) => {\n\n      const { data } = res;\n\n      this.setState({\n        _id: data._id,\n        title: data.title,\n        des: data.des,\n        content: data.content,\n        tags: data.tags,\n        category: data.category,\n      });\n    });\n\n    //获取分类选项\n    getCategoryList().then((res: any) => {\n      this.setState({ categoryList: res.data });\n    })\n  }\n\n  /**\n   * 标题、简述、标签、分类、富文本内容\n   */\n  onHandleTitle = (e: any) => {\n    this.setState({ title: e.target.value });\n  }\n  onHandleDes = (e: any) => {\n    this.setState({ des: e.target.value });\n  }\n  onHandleTag = (e: any) => {\n    this.setState({ tags: e.target.value.split(' ') });\n  }\n  getTypeValue = (id: string, name: string) => {\n    this.setState({\n      typeId: id,\n      typeName: name\n    });\n  }\n  onHandleContent = (value: string) => {\n    this.setState({ content: value });\n  }\n\n  /**\n   * 打开Model弹窗\n   */\n  showModel = () => {\n    this.setState({ visible: true });\n  }\n\n  /**\n   * 关闭Model弹窗\n   */\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n\n  /**\n   * 修改文章\n   */\n  handleOk = () => {\n    const { userIds, ids, title, des, content, category, tags } = this.state;\n    const params = { userIds, ids, title, des, content, category, tags };\n\n    this.setState({ confirmLoading: true });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      }, () => {\n        updateArticle(params).then((res: any) => {\n          if (!res.state) {\n            message.success('修改成功！', 1.5, () => {\n              this.props.history.push(`/article/${res.ids}`);\n            })\n          } else {\n            message.error(res.msg);\n          }\n        })\n      });\n    }, 1500);\n  };\n\n  render() {\n    const tags = this.state.tags.join(' ');\n \n    return (\n      <main className=\"main\">\n        <div className=\"title\">\n          <div className=\"input-title\">\n            <input type=\"text\"\n              placeholder=\"输入文章标题...\"\n              value={this.state.title}\n              onChange={this.onHandleTitle}\n            />\n          </div>\n          <div className=\"action-bar\">\n            <Link to={`/user/${this.state.userIds}`}>返回个人中心</Link>\n            <Button type=\"primary\" onClick={this.showModel}>确认修改</Button>\n            <Modal\n              title=\"修改文章\"\n              visible={this.state.visible}\n              onOk={this.handleOk}\n              onCancel={this.handleCancel}\n              confirmLoading={this.state.confirmLoading}\n              okText=\"确认\"\n              cancelText=\"取消\"\n            >\n              <div className=\"row\">\n                <h3>分类</h3>\n                {this.state.categoryList.map((item: any) => (\n                  <TypeRadio\n                    key={item.typeId}\n                    id={item.typeId}\n                    defaultChecked={item.typeId === this.state.typeId ? true : false}\n                    value={item.typeName}\n                    name=\"分类\"\n                    getTypeValue={this.getTypeValue}\n                  />\n                ))}\n              </div>\n              <div className=\"row\">\n                <h3>标签</h3>\n                <input type=\"text\"\n                  placeholder=\"添加一个或多个标签（多个标签之间用空格隔开）\"\n                  value={tags}\n                  onChange={this.onHandleTag}\n                />\n              </div>\n            </Modal>\n          </div>\n        </div>\n        <div className=\"des\">\n          <textarea\n            placeholder=\"输入文章简述...\"\n            onChange={this.onHandleDes}\n            value={this.state.des}\n          ></textarea>\n        </div>\n        <ReactQuill\n          placeholder=\"输入文章内容...\"\n          value={this.state.content}\n          onChange={this.onHandleContent}\n        />\n      </main>\n    )\n  }\n}\n\nexport default EditArticle;","import { request } from '../../services/request';\n\n/**\n * 修改文章\n */\nexport function updateArticle(params: any) {\n  return request.post('/article/update', params);\n}\n\n/**\n * 获取文章分类信息\n */\nexport function getArticleCategory() {\n  return request.get('/category/list', {});\n}","import { request } from '../request';\nimport {\n  GetArticleParamsParamsType,\n  GetArticleDataParamsType,\n  AddCommentParamsType,\n  AddArticleParamsType,\n} from './data';\n\n/**\n * 获取文章列表\n * @param params 关键字keyword、分类typeId、页码page、每页条数count\n */\nexport function getArticleList(params: GetArticleParamsParamsType) {\n  return request.get('/article/get/list', params);\n}\n\n/**\n * 获取特殊类型的文章列表\n * @param type 榜单类型（目前仅支持 hot、popular）\n */\nexport function getArticleListOfType(type: string) {\n  return request.get(`/article/get/list/${type}`, {});\n}\n\n/**\n * 获取指定用户（_id）发布过的文章列表\n * @param params 用户_id\n */\nexport function getArticleListOfUser(params: GetArticleDataParamsType) {\n  return request.get('/article/get/list/user', params);\n}\n\n/**\n * 获取文章详情\n * @param params 文章_id\n */\nexport function getArticleDetails(params: GetArticleDataParamsType) {\n  return request.get('/article/get/details', params);\n}\n\n/**\n * 获取文章评论\n * @param params 文章_id\n */\nexport function getArticleComments(params: GetArticleDataParamsType) {\n  return request.get('/article/get/comments', params);\n}\n\n/**\n * 评论文章\n * @param params 文章_id 、 评论内容content\n */\nexport function addArticleComment(params: AddCommentParamsType) {\n  return request.post('/article/add/comment', params);\n}\n\n/**\n * 点赞文章\n * @param params 文章_id\n */\nexport function praiseArticle(params: GetArticleDataParamsType) {\n  return request.post('/article/update/likes', params);\n}\n\n/**\n * 发表文章\n * @param params 文章字段\n */\nexport function addArticle(params: AddArticleParamsType) {\n  return request.post('/article/add', params);\n}\n\n/**\n * 修改文章\n * @param params 文章字段\n */\nexport function updateArticle(params: AddArticleParamsType) {\n  return request.post('/article/update', params);\n}\n\n/**\n * 删除文章\n * @param params 文章_id\n */\nexport function deleteArticle(params: GetArticleDataParamsType) {\n  return request.post('/article/delete', params);\n}","import { request } from '../request';\n\n/**\n * 获取分类列表\n */\nexport function getCategoryList() {\n  return request.get('/category/list', {});\n}"],"sourceRoot":""}